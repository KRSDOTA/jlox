program                 -> declaration* EOF ;
declaration             -> funcDecl | varDecl | statement;
funcDecl                 -> "fun" function ; 
function                -> IDENTIFIER "(" parameters? ")" block;
parameters              -> IDENTIFIER ( "," IDENTIFIER)* ; 
block                   -> "{" declaration* "}" ;
varDecl                 -> "var" IDENTIFIER ("=" expression)? ";" ;
statement               -> exprStatement | forStatement | ifStatement | printStatement | whileStatement | block ;
forStatement            -> "for" "(" (varDecl | expressionStatement | ";" ) expression? ";" expresion? ")" statement ;
whileStatement          -> "while" "(" expression ")" statement ;
expressionStatement     -> expression ";" ;
ifStatement             -> "if" "(" expression ")" statement
                            ("else" statement )? ;
printStatement          -> "print" expression ";" ;
expression              -> comma;
comma                   -> assignment ("," assignment)* ;
assignment              -> IDENTIFIER "=" assignment | conditional;
conditional             -> logic_or ("?" expression : conditional)? ;
logic_or                -> logic_and ( "or" logic_and )* ;
logic_and               -> equality ( "and" equality )* ;
equality                -> comparison ( term ( "==" | "!=" ) comparison )* ;
comparison              -> term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term                    -> factor (factor ("-" | "+" ) factor)* ;
factor                  -> unary ( ( "/" | "*" ) unary )* ;
unary                   -> ( "!" | "-" ) unary | call ;
call                    -> primary ( "(" arguments? ")" )*;
arguments               -> expression ( "," expression )* ;
primary                 -> NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;
